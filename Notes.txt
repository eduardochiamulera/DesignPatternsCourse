CREATIONAL
	Factory Method 
		O factory method define uma interface para criação de objetos permitindo que a sub-classe decida qual
		instância deve ser criada.
	
		Na Super classe terá o método abstrato da criação do objeto, delegando a responsabilidade de decidir quais objetos devem ser
		criados para a sub-classe.
	
	Singleton
		O padrão Singleton garante que uma classe tenha apenas uma instância, fornecendo um ponto de acesso global a ela.
		Ex: Acesso a um tipo de recurso, um arquivo, acesso ao bando de dados.
	
	Prototype
		Ele especifica objetos que se chamam protótipos para servir como base para realização de cópias.
		Ou seja, facilitam a criação de novos objetos por meio da cópia de objetos existentes.
	
	Builder
		Separa a construção de um objeto complexo da sua representação, eventualmente permitindo que 
		esse mesmo processo de construção possa derivar objetos diferentes.
		Vai abstrair o passo a passo de uma construção complexa.


STRUCTURAL
	Adapter (Wrapper)
		Ele é utilizado para que se possa converter uma determinada interface de uma classe
		para o padrão que os clientes esperam.
		Ele é um padrão que faz uma conversão, permitindo que se crie compatibilidade.
		Evitar acomplamento.

	Bridge
		Desacoplar uma abstração da sua implementação por que assim as duas podem
		variar de forma independente.
		
	FlyWeight
		Utilize o padrão para dar suporte a um grande número de objetos (muito especificos) de uma maneira eficiente.
		A proposta desse padrão é atuar como uma forma de cache.

	Decorator
		A intenção dele é adicionar comportamento a um objeto existente, de maneira dinâmica, de forma incremental,
		flexivel, podendo adicionar ou remover esse comportamento sem que o objeto saiba.
		Open/Close principal

		Ele incorpora um objeto que está sendo decorado.

BEHAVIORAL
	Chain of Responsability
		A intenção dele é criar uma cadeia de objetos que recebe uma determinada requisição e um deles pode decidir
		fazer o tratamento ao longo dessa cadeia e nesse momento o fluxo é interrompido.
		Criar uma lista encadeada de objetos, onde um aponta para o outro, e cada um deles toma a decisão se vai ou não
		realizar o tratamento.
		Não confundir com Pipelines/Midlewares onde todos tratam a requisição.

	Command (Action / Transaction)
		Encapsula uma solicitação na forma de objeto, com isso permitindo que você parametrize esse objeto para clientes
		diferentes, enfilere, faça algum tipo de auditoria, ou até suporte operações de undo (desfazer a operação).